{"version":3,"sources":["./src/app/authentication.guard.ts","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/environments/environment.ts","./src/app/services/post.service.ts","./src/app/posts/posts.component.ts","./src/app/posts/posts.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/authentication.service.ts","./src/app/services/comment.service.ts","./src/app/new-post/new-post.component.ts","./src/app/new-post/new-post.component.html","./src/app/services/backendUrl.ts","./src/app/services/user.service.ts","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/post-detail/post-detail.component.ts","./src/app/post-detail/post-detail.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { AuthenticationService } from './services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  \n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) { }\n  \n  canActivate(): boolean {\n    if (this.authService.loggedIn())\n      return true;\n    else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  signupForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private userService: UserService,\n  ) { }\n\n  ngOnInit(): void {\n    this.signupForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  // convenient getter for easy access to form fields\n  get f() { \n    return this.signupForm.controls; \n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.signupForm.invalid) {\n        return;\n    }\n\n    this.userService.register(this.signupForm.value)\n      .pipe(first())\n      .subscribe(\n          res => {\n            localStorage.setItem('token', res.token);\n            this.userService.setregisterationStatus(\"success\");\n            this.router.navigate(['/login']);\n          },\n          error => {\n            console.log(error);\n            this.userService.setregisterationStatus(\"failure\");\n          }\n      );\n}\n\n}","<form class=\"signup-form\" [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"signupform-container\">\n        <h2>Sign up here</h2>\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" placeholder=\"Username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n            <div  class=\"register-error-message\" *ngIf=\"f.username.errors.required\">Username is required</div>\n        </div>\n\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n            <div class=\"register-error-message\" *ngIf=\"f.password.errors.required\">Password is required</div>\n            <div class=\"register-error-message\" *ngIf=\"f.password.errors.minlength\">Password must be 6 characters long</div>\n        </div>\n\n        <span class=\"btn-container\">\n            <button class=\"register-btn\">\n                Register\n            </button>\n            <a routerLink=\"/login\" class=\"login-btn\">Login</a>\n        </span>\n\n    </div>\n</form>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Post } from '../post';\nimport { BACKEND_URL } from './backendUrl';\n\n \n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private postsUrl = BACKEND_URL+'posts';  // URL to local host running express API \n  private createPostUrl = BACKEND_URL+'post';\n  private postUrl = BACKEND_URL+'post/';\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getPosts(): Observable<Post[]> {\n    return this.http.get<Post[]>(this.postsUrl)\n      .pipe(\n        catchError(this.handleError<Post[]>('getPosts', []))\n      );\n  }\n\n  getPost(id: string): Observable<Post> {\n    return this.http.get<Post>(this.postUrl+`${id}`)\n      .pipe(\n        catchError(this.handleError<Post>('getSinglePost'))\n      );\n  }\n\n  createNewPost(post: Post): Observable<Post> {\n    return this.http.post<Post>(this.createPostUrl, post, this.httpOptions).pipe(\n      tap((newPost: Post) => console.log(`added a new post w/ id=${newPost.id}`)),\n      catchError(this.handleError<Post>('addNewPost'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  \n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, tap } from 'rxjs/operators';\n\nimport { Post } from '../post';\nimport { PostService } from '../services/post.service';\n// import { POSTS } from '../mock-posts';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css']\n})\nexport class PostsComponent implements OnInit {\n  allPosts: Post[];\n  //  allPosts = POSTS;\n\n  constructor(\n    private postService: PostService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.getPosts();\n  }\n\n  getPosts(): void {\n    this.postService.getPosts()\n      .subscribe(posts => this.allPosts = posts);\n  }\n\n  // getPost(id: number): void {\n  //   this.router.navigate(['/post', id]); \n  // }\n}","<div class=\"posts-wrapper\">\n    <h1 class=\"posts-header\">Posts</h1>\n    <ul *ngIf=\"allPosts\" class=\"posts-ul\">\n        <li *ngFor=\"let post of allPosts.data\" class=\"posts-li\">\n            <div class=\"post-container\">\n                <img src=\"assets/default-post-cover.png\" alt=\"\" class=\"post-cover\">\n                <div class=\"post-content\">\n                    <h3 class=\"username\" *ngIf=\"post._creator\">{{post._creator.username}}</h3> \n                    <p class=\"date-time\" *ngIf=\"post.createdAt\">{{post.createdAt | date:'medium'}}</p>\n                    <a routerLink=\"/post/{{post._id}}\" class=\"post-title\">\n                        <h1 class=\"post-title\" *ngIf=\"post.title\">{{post.title}}</h1>\n                    </a>\n                    <a [routerLink]=\"['/post', post._id]\" class=\"post-comments\">Add Comments</a>\n                </div>\n            </div>\n        </li>\n    </ul>\n\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  // displayNavigation = true;\n\n  constructor(\n    // private router: Router\n  ) { }\n\n  ngOnInit(): void { \n    // this.router.navigate(['posts']);\n\n/*     var navElement = document.getElementById('navbar');\n    this.displayNavigation = ! navElement.classList.contains('removeHeader'); */\n  }\n  \n}\n\n","<!-- <div *ngIf=\"displayNavigation\" class=\"nav-container\"> -->\n  <nav id=\"navbar\">\n    <div class=\"nav-left\">\n      <a routerLink=\"/posts\" class=\"login-btn\">\n        <img src=\"assets/sample-logo.png\" alt=\"logo\" class=\"nav-item logo\">\n      </a>\n      <input type=\"input\" class=\"nav-item searchbar\" placeholder=\"Search...\">\n    </div>\n    <div class=\"nav-right\">\n      <a class=\"nav-item new-post-btn\" routerLink=\"/newpost\">Write a Post</a>\n      <img class=\"nav-item navbar-icon\" src=\"assets/bell-icon.png\" alt=\"notifications\">\n      <a routerLink=\"/login\" class=\"login-btn\">\n        <img class=\"nav-item navbar-icon\" src=\"assets/user-icon.png\" alt=\"user icon\">\n      </a>\n      \n    </div>\n  </nav> \n<!-- </div> -->\n\n<router-outlet></router-outlet>\n\n<footer>\n    <ul class=\"footer-items\">\n      <li>\n        <img src=\"assets/sample-logo.png\" alt=\"logo\" class=\"logo\">\n      </li>\n      <li>\n        <a href=\"#\">FAQ</a>\n      </li>\n      <li>\n        <a href=\"#\">About</a>\n      </li>\n      <li>\n        <a href=\"#\">Contact</a>\n      </li>\n      <li>\n        &#169; Copyrights, 2020\n      </li>\n    </ul>\n  </footer>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PostsComponent } from './posts/posts.component';\nimport { PostDetailComponent } from './post-detail/post-detail.component';\nimport { PostService } from './services/post.service';\nimport { NewPostComponent } from './new-post/new-post.component';\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { UserService } from './services/user.service';\nimport { AuthenticationService } from './services/authentication.service';\nimport { AuthenticationGuard } from './authentication.guard';\nimport { CommentService } from './services/comment.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostsComponent,\n    PostDetailComponent,\n    NewPostComponent,\n    RegisterComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [ \n    PostService,\n    UserService,\n    AuthenticationService,\n    AuthenticationGuard,\n    CommentService,\n   ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { User } from '../user';\nimport { BACKEND_URL } from './backendUrl';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n  private loginUrl = BACKEND_URL+'login'; \n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  login(user: User) {\n      return this.http.post<any>(this.loginUrl, user);\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('userId');\n  }\n  \n  logout() {\n    localStorage.setItem('userId', null);\n    localStorage.setItem('token', null);\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Comment } from '../comment';\nimport { BACKEND_URL } from './backendUrl';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n  private commentUrl = BACKEND_URL+'comment';\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  createNewComment(comment: Comment): Observable<Comment> {\n    return this.http.post<Comment>(this.commentUrl, comment).pipe(\n      /* tap((newComment: Comment) => \n      console.log(`added a new comment at the post with id=${newComment.id}`)), */\n      catchError(this.handleError<Comment>('addNewComment'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  \n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Post } from '../post';\nimport { PostService } from '../services/post.service';\n\n@Component({\n  selector: 'app-new-post',\n  templateUrl: './new-post.component.html',\n  styleUrls: ['./new-post.component.css']\n})\nexport class NewPostComponent implements OnInit {\n\n  constructor(\n    private postService: PostService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // var navElement = document.getElementById('navbar');\n    // navElement.classList.add('removeHeader');\n  }\n\n  addNewPost(title: string, text: string): void {\n    title = title.trim();\n    text = text.trim();\n    var _creatorId = localStorage.getItem('userId');\n    // user not logged in case handled with authentication guard approach\n    if (!title || !text || !_creatorId) { return; }\n    this.postService.createNewPost({ title, text, _creatorId } as Post)\n      .subscribe(post => {\n        this.router.navigate(['posts']);\n    });\n  }\n\n}\n","<div class=\"newpost-container\">\n    <div class=\"post-content\">\n        <button class=\"coverimage-btn\">Add Cover Image</button>\n        <textarea class=\"post-title\" #postTitle cols=\"30\" rows=\"3\" placeholder=\"Here goes the Post Title \"></textarea>\n        <textarea class=\"post-description\" #postDescription cols=\"30\" rows=\"10\" placeholder=\"Write Your Post Content Here . . .\"></textarea>\n    </div>\n    <button class=\"publish-btn\" (click)=\"addNewPost(postTitle.value, postDescription.value); postTitle.value=''; postDescription.value=''\">Publish</button>\n</div>\n","export const BACKEND_URL = 'http://188.166.37.56:3001/api/';\n// export const BACKEND_URL = 'http://localhost:3001/api/';","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { User } from '../user';\nimport { BACKEND_URL } from './backendUrl';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private registerUserUrl = BACKEND_URL+'signup';\n  private registerationStatus: string = '';  \n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  register(user: User) {\n    return this.http.post<any>(this.registerUserUrl, user);\n  }\n\n  getregisterationStatus(): string {\n    return this.registerationStatus;\n  }\n\n  setregisterationStatus(status: string) {\n    this.registerationStatus = status;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PostsComponent } from './posts/posts.component';\nimport { PostDetailComponent } from './post-detail/post-detail.component';\nimport { NewPostComponent } from './new-post/new-post.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthenticationGuard } from './authentication.guard';\n\nconst routes: Routes = [\n  { path: '', component: PostsComponent },\n  // { path: '', redirectTo: '/posts', pathMatch: 'full' },\n  { path: 'posts', component: PostsComponent },\n  { path: 'post/:id', component: PostDetailComponent},\n  { path: 'newpost', component: NewPostComponent, canActivate: [AuthenticationGuard]},\n  { path: 'login', component: LoginComponent},\n  { path: 'register', component: RegisterComponent},\n  // otherwise redirect to home\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { \n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../services/authentication.service';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  submitted = false;\n  returnUrl: string;\n  displayMessage: string = '';\n  successMessage: boolean = false;\n  failureMessage: boolean = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService,\n        private userService: UserService\n  ) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n  });\n\n  if (this.userService.getregisterationStatus() == \"success\") {\n    this.successMessage = true;\n    this.displayMessage = \"User registeration successful\";\n    this.userService.setregisterationStatus('');\n  }\n  else if (this.userService.getregisterationStatus() == \"failure\") {\n    this.failureMessage = true;\n    this.displayMessage = \"User registeration failed. Retry to register.\";\n    this.userService.setregisterationStatus('');\n  }\n\n  // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenient getter for easy access to form fields\n  get f() { \n    return this.loginForm.controls; \n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    this.displayMessage = null;\n    this.successMessage = false;\n    this.failureMessage = false;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n        return;\n    }\n\n    this.authenticationService.login(this.loginForm.value)\n      .pipe(first())\n      .subscribe(\n        res => {\n          // improve this  \n          if (res.data) {\n            localStorage.setItem('userId', res.data._id);\n            localStorage.setItem('token', res.token);\n            this.router.navigate([this.returnUrl]);\n          }\n          if(!res.data) {\n            this.failureMessage = true;\n            this.displayMessage = \"Unable to login. Check username and password\";\n          }\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n}","<div class=\"app-message\" *ngIf=\"successMessage\">\n    <div class=\"success-message\">{{displayMessage}}</div>\n</div>\n<div class=\"app-message\" *ngIf=\"failureMessage\">\n    <div class=\"error-message\">{{displayMessage}}</div>\n</div>\n\n<form class=\"login-form loginform-container\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- <div class=\"loginform-container\"> -->\n        <h2>Login here</h2>\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" placeholder=\"Username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n            <div class=\"login-error-message\" *ngIf=\"f.username.errors.required\">Username is required</div>\n        </div>\n\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n            <div class=\"login-error-message\" *ngIf=\"f.password.errors.required\">Password is required</div>\n        </div>\n\n        <span class=\"btn-container\">\n            <button class=\"login-btn\">\n                Login\n            </button>\n            <a routerLink=\"/register\" class=\"register-btn\">Register</a>\n        </span>\n    <!-- </div> -->\n</form>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Post } from '../post';\nimport { PostService } from '../services/post.service';\nimport { Comment } from '../comment';\nimport { CommentService } from '../services/comment.service';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css']\n})\nexport class PostDetailComponent implements OnInit {\n  singlePost: Post;\n  postId: string;\n\n  constructor(\n    private postService: PostService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private commentService: CommentService,\n    private authService: AuthenticationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.postId = this.route.snapshot.params['id'];\n    this.getSinglePost(this.postId);\n  }\n\n  getSinglePost(id: string): void {\n    this.postService.getPost(id)\n      .subscribe(post => \n      {\n        this.singlePost = post;\n      });\n  }\n\n  verifyUser() {\n    if (this.authService.loggedIn())\n      return true;\n    else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n\n  addNewComment(comment: string) {\n    var text = comment.trim();\n    var _creatorId = localStorage.getItem('userId');\n    var _postId = this.postId;\n\n    this.commentService.createNewComment({ text, _creatorId, _postId } as Comment)\n      .subscribe(post => {\n        this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n        this.router.onSameUrlNavigation = 'reload';\n        this.router.navigate(['/post', this.postId]); // doesnot refreshes the page\n    });\n\n  }\n}\n","<div class=\"post-detail-container\" *ngIf=\"singlePost\">\n    <img src=\"assets/default-post-cover.png\" alt=\"\" class=\"post-cover\">\n    <div class=\"post-content\">\n        <h3 class=\"username\">{{singlePost.data._creator.username}}</h3>\n        <p class=\"date-time\">{{singlePost.data.createdAt | date:'medium'}}</p>\n        <h1 class=\"post-title\">{{singlePost.data.title}}</h1>\n        <p class=\"post-description\">\n            {{singlePost.data.link}}\n        </p>\n        <p class=\"post-description\">\n            {{singlePost.data.text}}\n        </p>\n    </div>\n\n    <div class=\"comments-container\">\n        <h3 class=\"comments\">Add Comments</h3>\n        <textarea class=\"new-comment\" cols=\"30\" rows=\"10\" (focus)=verifyUser() #commentText></textarea>\n            <button class=\"comment-btn\" (click)=addNewComment(commentText.value)>Submit</button>\n\n        <ul *ngIf=\"singlePost.data._comments\" class=\"comments-ul\">\n            <li *ngFor=\"let comment of singlePost.data._comments\" class=\"comments-li\">\n                <h4>{{comment._creator.username}} </h4>\n                {{comment.text}}\n            </li>\n        </ul>\n    </div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}